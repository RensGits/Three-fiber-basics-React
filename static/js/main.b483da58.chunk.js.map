{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Box","position","speed","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","onClick","castShadow","ref","attach","args","MeshWobbleMaterial","color","softShadows","App","shadows","colorManangement","camera","fov","intensity","shadow-mapSize-Width","shadow-mapSize-Height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAQA,SAASA,EAAT,GAAgC,IAAlBC,EAAiB,EAAjBA,SAAUC,EAAO,EAAPA,MAChBC,EAAOC,iBAAO,MACpBC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAErE,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAIA,OACI,uBAAMC,QAAW,kBAAMD,GAAWD,IAASG,YAAU,EAACb,SAAYA,EAAUc,IAAOZ,EAAnF,UACI,mCAAmBa,OAAQ,WAAWC,KAAM,CAAC,EAAE,EAAE,KACjD,cAACC,EAAA,EAAD,CAAoBF,OAAQ,WAAWG,MAAQ,OAAOjB,MAASA,OAbzEkB,cAgEeC,MA3Cf,WAGE,OACE,mCACE,eAAC,IAAD,CAAQC,SAAO,EAACC,kBAAgB,EAACC,OAAU,CAACvB,SAAU,EAAE,EAAG,EAAG,IAAKwB,IAAK,IAAxE,UACE,8BAAcC,UAAa,KAC3B,kCACEZ,YAAU,EACVb,SAAY,CAAC,EAAE,GAAG,GAClByB,UAAa,IACbC,uBAAwB,KACxBC,wBAAyB,KACzBC,oBAAqB,GACrBC,sBAAuB,GACvBC,sBAAuB,GACvBC,oBAAqB,GACrBC,wBAAyB,KAE3B,4BAAYhC,SAAY,EAAE,GAAG,EAAE,IAAKyB,UAAW,KAE/C,gCACE,uBAAMQ,eAAa,EAAC3B,SAAY,EAAE4B,KAAKC,GAAK,EAAE,EAAE,GAAInC,SAAY,CAAC,GAAG,EAAE,GAAtE,UACE,qCAAqBe,OAAO,WAAWC,KAAQ,CAAC,IAAI,OACpD,gCAAgBD,OAAO,WAAWqB,QAAW,UAKjD,cAACrC,EAAD,CAAKC,SAAY,CAAC,EAAE,EAAE,GAAMC,MAAS,IACrC,cAACF,EAAD,CAAKC,SAAY,CAAC,EAAE,GAAG,GAAKC,MAAS,IACrC,cAACF,EAAD,CAAKC,SAAY,CAAC,EAAE,GAAG,GAAKC,MAAS,IACrC,cAACF,EAAD,CAAKC,SAAY,CAAC,EAAE,GAAG,GAAKC,MAAS,KAIrC,cAACoC,EAAA,EAAD,UCnDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b483da58.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport './App.css';\nimport {MeshWobbleMaterial, softShadows, OrbitControls} from '@react-three/drei';\n\n\nsoftShadows();\n\nfunction Box({position, speed}){\n  const mesh = useRef(null)\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.02))\n  \n  const [expand, setExpand] = useState(false);\n  // const props = useSpring(\n  //   {scale: expand ? [2,2,2,] : [1,1,1]}\n  // )\n  return(\n      <mesh onClick = {() => setExpand(!expand)} castShadow position = {position} ref = {mesh}>\n          <boxBufferGeometry attach= 'geometry' args={[1,1,1]} />\n          <MeshWobbleMaterial attach= 'material' color = 'pink' speed = {speed}/> \n      </mesh>\n  )\n}\n\n\n\n\nfunction App() {\n  \n\n  return (\n    <>\n      <Canvas shadows colorManangement camera = {{position: [-5, 2, 10], fov: 50}}>\n        <ambientLight intensity = {0.2}/>\n        <directionalLight\n          castShadow \n          position = {[0,10,0]} \n          intensity = {1.5} \n          shadow-mapSize-Width = {1024}\n          shadow-mapSize-Height = {1024}\n          shadow-camera-far = {50}\n          shadow-camera-left = {-10}\n          shadow-camera-right = {10}\n          shadow-camera-top = {10}\n          shadow-camera-bottom = {-10}\n          />\n        <pointLight position = {[-10,0,20]} intensity={0.5}/>\n\n        <group>\n          <mesh receiveShadow rotation = {[-Math.PI / 2,0,1]} position = {[0,-3,0]}>\n            <planeBufferGeometry attach='geometry' args = {[200,200]}/>\n            <shadowMaterial attach='material' opacity = {0.3}/>  \n         </mesh>\n        </group>\n\n\n        <Box position = {[0,0,0]}   speed = {1}/>\n        <Box position = {[4,0,-3]}  speed = {3}/>\n        <Box position = {[0,0,-5]}  speed = {5}/>\n        <Box position = {[5,0,-7]}  speed = {10}/>\n        \n        \n        \n        <OrbitControls />\n\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}